---
name: Create release

on:
  push:
    tags:
      - 'v*'

jobs:
  create_release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Cache node_modules
        id: yarn-cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Compile
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' }}
        run: yarn install --ignore-scripts
      - name: Build
        run: yarn run build:prod
      - name: Deploy to GitHub Pages
        if: ${{ true }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
      - name: Get latest release tag
        id: latest_release
        run: |
          latest_tag=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          echo "::set-output name=tag::${latest_tag}"
      - name: Get current release tag
        id: current_release
        run: echo "::set-output name=tag::${GITHUB_REF/refs\/tags\//}"
      - name: Build changelog
        id: changelog
        run: |
          body=$(git log --pretty=oneline ${{ steps.latest_release.outputs.tag }}..${{ steps.current_release.outputs.tag }})
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::${body}"
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.current_release.outputs.tag }}
          body: |
            # Changelog

            ${{ steps.changelog.outputs.body }}
          draft: false
          prerelease: false
  trigger_deployment:
    name: Trigger deployment to AWS
    if: ${{ false }}
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Send deployment trigger
        run: |
          curl -XPOST -u "${{ secrets.PAT_USERNAME }}:${{secrets.PAT_TOKEN}}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type: application/json" https://api.github.com/repos/${{ secrets.PAT_USERNAME }}/business-card-deployment/actions/workflows/terraform.yml/dispatches --data '{"ref": "refs/heads/main"}'
